service: gainesvilletips

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-apigw-binary

custom:
  tableName: 'servers-table-${self:provider.stage}'
  bucketName: 'images-gainevilletipsorg'
  wsgi:
    app: gainesvilletips_org.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  apigwBinary:
    types:           #list of mime-types
      - 'multipart/form-data'

provider:
  name: aws
  stage: dev
  runtime: python3.8
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ServersDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: { "Fn::Join": ["", ["arn:aws:s3:::${self:custom.bucketName}", "/*" ] ] }
  environment:
    SERVERS_TABLE: ${self:custom.tableName}
    IMAGES_BUCKET: ${self:custom.bucketName}

functions:
  webapi:
    handler: wsgi_handler.handler
    events:
      - http: 'ANY /'
      - http:
          method: ANY
          path: '{proxy+}'
          integration: lambda-proxy
          request:
            template:
              multipart/form-data: '{ "content": "$input.body" }'
    environment:
      GOOGLE_TOKEN: ${ssm:/google.tokens.gainesvilletips.org~true}
      ADMIN_TOKEN: ${ssm:/site-admin.tokens.gainesvilletips.org~true}
      USE_DYNAMODB: true

resources:
  Resources:
    ServersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
